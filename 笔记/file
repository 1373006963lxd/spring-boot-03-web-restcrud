Web开发：

    1、使用SpringBoot应用，选中我们需要的模块；
    2、SpringBoot已经将这些默认的场景配置好，只需要在配置文件中指定少量配置就可以运行起来
    3、自己编写业务代码

自动配置原理?

    这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？

    1.xxxxAuToConfiguration：帮我们给容器中自动配置组件
    2.xxxxProperties：配置类中封装配置文件的内容

对静态资源的文件在SpringBoot中的放置：
        1）所有/webjars/**,都去classpath：/META-INF/resources/webjars/找资源
        webjars：以jar包的方式引入静态资源
        https://www.webjars.org/  ---------------这上面都是前端框架的maven需要的信息
        访问制动配置的静态资源的路径：localhost:8080/webjars/jquery/3.4.1/jquery.js
        2)./** 访问当前项目的任何资源，（静态资源的文件夹）
        "classpath:/META-INF/resources"
        "classpath:/resources/"
        "classpath:/static/"
        "classpath:/public/"
        "/" 当前项目的根路径

        localhost:8080/abc   ==== 去静态资源文件夹下找abc

        3)欢迎页； 静态资源文件夹下的所有index.html 页面； 被/** 映射；
        localhost:8080/   找index页面

        4）所有的 **/favicon.ico 都是在静态资源文件下找


模板引擎：

    templates里面放入页面需要添加这个依赖才可以访问的。
    thymeleaf模板引擎：注意依赖的加入
    可以在github上查找最新的版本搜索Thymeleaf即可
    布局功能  搜索：thymeleaf-layout-dialect即可


SpringBoot 自动配置了SpringMVC
        自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（view）)，视图对象
        决定如何渲染（转发？重定向？）

        ContentNegotiatingViewResolver：组合所有的的视图解析器

        如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来

        静态资源文件夹路径 webjars
        静态首页访问
        自动注册了：
         Converter： 转换器： public String hello（User user） 类型转换使用Converter
         Formatter： 格式化器： 2017/12/17 =====Date

         自己添加格式化转换器，我们需要放到容器中即可；

         HttpMessageConverter：SpringMVC 用来转换转换http请求和响应的  User--json
         HttpMessageConverters：是从容器中确定，获取所有的HttpMessageConverter
编写一个配置类（@Configuration），是WebMvcConfiguration类型，不能标注@EnableWebMvc
 @Autowired用在方法上是从容器中获取所有的（方法参数的类型）


登录页面的设置：
    国际化
    以前的SpringMvc：
    1）编写国际化配置文件
    2）使用ResourceBundleMessageSource管理国际化资源文件
    3）在页面使用fmt：message取出国际化内容


    步骤：SpringBoot
    1）编写国际化配置文件，抽取页面需要显示的国际化消息
    添加国际化配置文件 语言+国家
    直接在国际化视图里面添加即可，三个properties文件自动就会加上信息
    login.properties是默认的
    login_en_US.properties是英文的
    login_zh_CN.properties是中文的
    2）springboot自动配置了 MessageSourcesAutoConfigutation---messageSources--ResourceBundleMessageSource

     @Bean
        public MessageSource messageSource(MessageSourceProperties properties) {
            ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
            //获得基础名（去掉语言＋国家）咱们这里就是login就是基础名
            if (StringUtils.hasText(properties.getBasename())) {
                messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));
            }

            if (properties.getEncoding() != null) {
                messageSource.setDefaultEncoding(properties.getEncoding().name());
            }

            messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());
            Duration cacheDuration = properties.getCacheDuration();
            if (cacheDuration != null) {
                messageSource.setCacheMillis(cacheDuration.toMillis());
            }

            messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());
            messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());
            return messageSource;
        }

        需要在配置文件中指名配置文件的位置

        3)去页面获取国际化的值#{}

        添加后测试：显示的是英文还是中文与你浏览器的语言设置有关（中文置顶就是中文，英语（美国）置顶就是英文）
        现在我们想要的效果就是自己按中文就是中文，英文就是英文

        国际化Local（区域信息对象）；LocalResolver（获取区域信息对象）；WebMvcAutoConfiguration-
          @Bean
                @ConditionalOnMissingBean
                @ConditionalOnProperty(
                    prefix = "spring.mvc",
                    name = {"locale"}
                )
                public LocaleResolver localeResolver() {
                    if (this.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) {
                        return new FixedLocaleResolver(this.mvcProperties.getLocale());
                    } else {
                        AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();
                        localeResolver.setDefaultLocale(this.mvcProperties.getLocale());
                        return localeResolver;
                    }
                }

                默认就是根据区域信息进行获取Local信息 ---启动项目-F12-Network-看请求头信息（Accept-Language）

    当项目运行起来以后，改变前端代码的值，这个时候浏览器运行的前端代码是没有改变的，
    那么咱们在项目中的代码ctrl+f9 ，然后在去运行浏览器页面查看前端代码就变了。
    也可以热部署来实现实时生效

CRUD-员工列表：
    实验要求：
    1）、Restful：CRUD 满足Rest风格；
    URL：/资源名称/资源标识  HTTP请求方式区分对资源CRUD操作
                    普通CRUD                  RestfulCRUD
         查询        getEMP                    emp---GET

         添加        addEMP?XXX                emp---post

         修改        updateEMP?id=xxx&xxx=xx   emp(id)----PUT

         删除        deleteEMP?id=1             emp(id)----DELETE

     2)、实验的请求架构
                                   请求URI                  请求方式
         查询所有员工                emps                     GET

         查询某个员工（来到修改页面）   emp/1                    GET

         来到添加页面                 emp                      GET

         添加员工                     emp                      POST

         来到修改的页面（查出员工进行信息回显） emp/1              GET

         修改员工                     emp                      PUT

         删除员工                     emp/1                    DELETE

thymeleaf:公共页面元素抽取

        1.抽取公共片段
        <div th:fragment="copy">
            之间的标签内容
        </div>


        2.引入公共片段
        <div th:insert="~{footer::copy}"> </div>
        ~{templatename :: selector} : 模板名:选择器
        ~{templatename :: fragmentname} : 模板名:片段名

        3.默认效果
        insert的功能片段在div标签中
        如果使用th:insert 等属性引入，可以不写~{}
        行内写法可以加上：[[~{}]]   ;  [(~{})]

        三种引入功能片段的th属性
        th:insert : 将公共片段整个插入到声明引入的元素中
        th:replace:将生命引入的元素替换为公共片段
        th:include: 将被引入的片段内容包含进这个标签

最后将公共部分抽取到一个文件中，然后根据上面的抽取＋引入即可完成


在引入数据库的数据的时候：
            <tbody>
                          <tr th:each="emp:${emps}">
                            <td th:text="${emp.getId()}"></td>
                            <td th:text="${emp.getLastName()}"></td>
                            <td th:text="${emp.getEmail()}"></td>
                            <td th:text="${emp.getGender()}==0?'女':'男'"></td>
                            <td th:text="${emp.getDepartment().getDepartmentName()}"></td>
                            <td th:text="${#dates.format(emp.getBirth(),'yyyy-MM-dd HH:mm')}"></td>

不知情的错误：
在 <td th:text="${emp.getLastName()}"></td>上面加了一个行内形式的注解导致报错：[[${emp.getLastName()}]]

postman------用来做接口测试

错误处理----------SpringBoot中ErrorMvcAutoConfiguration
    如果是浏览器进行访问则会返回一个错误页面
    如果是客户端进行访问则会返回json数据

错误的数据格式---报400错误
浏览器访问地址不存在----报404错误


错误提示如果在模板引擎下，错误提示可以动态获得
如果没有模板引擎，则会接受静态文件中的文件---但是错误信息不能动态获取


刷新html页面直接ctrl+f9


以前的注册servlet，Filter，Listener  都是在SpringMvc中的webapp/WEB-INF/web.xml

springboot默认使用的是tomacat容器
当然springboot里面还有两个其他的servlet容器：jetty，undertow
可以在pom.xml文件中排除默认的tomcat配置，添加其他你想要容器的依赖即可。

